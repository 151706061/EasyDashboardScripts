CMAKE_MINIMUM_REQUIRED(VERSION 2.4 FATAL_ERROR)

GET_FILENAME_COMPONENT(ED_script_EasyDashboardVariables "${CMAKE_CURRENT_LIST_FILE}" ABSOLUTE)
GET_FILENAME_COMPONENT(ED_dir_EasyDashboardVariables "${CMAKE_CURRENT_LIST_FILE}" PATH)

SET(ED_revision_EasyDashboardVariables "$Revision: 1.2 $")
SET(ED_date_EasyDashboardVariables "$Date: 2007/01/17 12:59:35 $")
SET(ED_author_EasyDashboardVariables "$Author: david.cole $")
SET(ED_rcsfile_EasyDashboardVariables "$RCSfile: EasyDashboardVariables.cmake,v $")

MACRO(ED_APPEND dac_var dac_line)
  SET(${dac_var} "${${dac_var}}${dac_line}\n")
ENDMACRO(ED_APPEND)

MACRO(ED_GET_EasyDashboardInfo var)
  SET(${var} "")
  ED_APPEND(${var} "<EasyDashboardInfo")
  ED_APPEND(${var} "  CTEST_SCRIPT_NAME='${CTEST_SCRIPT_NAME}'")
  ED_APPEND(${var} "  CTEST_SCRIPT_ARG='${CTEST_SCRIPT_ARG}'")
  ED_APPEND(${var} "  CTEST_SCRIPT_DIRECTORY='${CTEST_SCRIPT_DIRECTORY}'")
  ED_APPEND(${var} "")
  ED_APPEND(${var} "  ED_cache='${ED_cache}'")
  ED_APPEND(${var} "")
  ED_APPEND(${var} "  CTEST_SOURCE_DIRECTORY='${CTEST_SOURCE_DIRECTORY}'")
  ED_APPEND(${var} "  CTEST_BINARY_DIRECTORY='${CTEST_BINARY_DIRECTORY}'")
  ED_APPEND(${var} "")
  ED_APPEND(${var} "  CTEST_PROJECT_NAME='${CTEST_PROJECT_NAME}'")
  ED_APPEND(${var} "  CTEST_DROP_LOCATION='${CTEST_DROP_LOCATION}'")
  ED_APPEND(${var} "  CTEST_DROP_METHOD='${CTEST_DROP_METHOD}'")
  ED_APPEND(${var} "  CTEST_DROP_SITE='${CTEST_DROP_SITE}'")
  ED_APPEND(${var} "  CTEST_NIGHTLY_START_TIME='${CTEST_NIGHTLY_START_TIME}'")
  ED_APPEND(${var} "  CTEST_TRIGGER_SITE='${CTEST_TRIGGER_SITE}'")
  ED_APPEND(${var} "")
  ED_APPEND(${var} "  CTEST_BUILD_COMMAND='${CTEST_BUILD_COMMAND}'")
  ED_APPEND(${var} "  CTEST_BUILD_CONFIGURATION='${CTEST_BUILD_CONFIGURATION}'")
  ED_APPEND(${var} "  CTEST_BUILD_NAME='${CTEST_BUILD_NAME}'")
  ED_APPEND(${var} "  CTEST_CMAKE_GENERATOR='${CTEST_CMAKE_GENERATOR}'")
  ED_APPEND(${var} "  CTEST_DATA_DIRECTORY='${CTEST_DATA_DIRECTORY}'")
  ED_APPEND(${var} "  CTEST_NOTES_FILES='${CTEST_NOTES_FILES}'")
  ED_APPEND(${var} "  CTEST_RUN_CURRENT_SCRIPT='${CTEST_RUN_CURRENT_SCRIPT}'")
  ED_APPEND(${var} "  CTEST_SITE='${CTEST_SITE}'")
  ED_APPEND(${var} "  CTEST_UPDATE_COMMAND='${CTEST_UPDATE_COMMAND}'")
  ED_APPEND(${var} "  CTEST_UPDATE_OPTIONS='${CTEST_UPDATE_OPTIONS}'")
  ED_APPEND(${var} "")
  ED_APPEND(${var} "  ED_args='${ED_args}'")
  ED_APPEND(${var} "  ED_build='${ED_build}'")
  ED_APPEND(${var} "  ED_buildname='${ED_buildname}'")
  ED_APPEND(${var} "  ED_clean='${ED_clean}'")
  ED_APPEND(${var} "  ED_config='${ED_config}'")
  ED_APPEND(${var} "  ED_configure='${ED_configure}'")
  ED_APPEND(${var} "  ED_dir_logs='${ED_dir_logs}'")
  ED_APPEND(${var} "  ED_dir_mytests='${ED_dir_mytests}'")
  ED_APPEND(${var} "  ED_dir_support='${ED_dir_support}'")
  ED_APPEND(${var} "  ED_duration='${ED_duration}'")
  ED_APPEND(${var} "  ED_gen='${ED_gen}'")
  ED_APPEND(${var} "  ED_generator='${ED_generator}'")
  ED_APPEND(${var} "  ED_interval='${ED_interval}'")
  ED_APPEND(${var} "  ED_model='${ED_model}'")
  ED_APPEND(${var} "  ED_notes='${ED_notes}'")
  ED_APPEND(${var} "  ED_projectcachescript='${ED_projectcachescript}'")
  ED_APPEND(${var} "  ED_site='${ED_site}'")
  ED_APPEND(${var} "  ED_source='${ED_source}'")
  ED_APPEND(${var} "  ED_sourcename='${ED_sourcename}'")
  ED_APPEND(${var} "  ED_submit='${ED_submit}'")
  ED_APPEND(${var} "  ED_system='${ED_system}'")
  ED_APPEND(${var} "  ED_test='${ED_test}'")
  ED_APPEND(${var} "  ED_update='${ED_update}'")
  ED_APPEND(${var} "  ED_verbose='${ED_verbose}'")
  ED_APPEND(${var} "  ED_wrappers='${ED_wrappers}'")
  ED_APPEND(${var} "")
  ED_APPEND(${var} "  ED_script_EasyDashboard='${ED_script_EasyDashboard}'")
  ED_APPEND(${var} "  ED_revision_EasyDashboard='${ED_revision_EasyDashboard}'")
  ED_APPEND(${var} "  ED_date_EasyDashboard='${ED_date_EasyDashboard}'")
  ED_APPEND(${var} "  ED_author_EasyDashboard='${ED_author_EasyDashboard}'")
  ED_APPEND(${var} "  ED_rcsfile_EasyDashboard='${ED_rcsfile_EasyDashboard}'")
  ED_APPEND(${var} "  ED_dir_EasyDashboard='${ED_dir_EasyDashboard}'")
  ED_APPEND(${var} "")
  ED_APPEND(${var} "  ED_script_EasyDashboardVariables='${ED_script_EasyDashboardVariables}'")
  ED_APPEND(${var} "  ED_revision_EasyDashboardVariables='${ED_revision_EasyDashboardVariables}'")
  ED_APPEND(${var} "  ED_date_EasyDashboardVariables='${ED_date_EasyDashboardVariables}'")
  ED_APPEND(${var} "  ED_author_EasyDashboardVariables='${ED_author_EasyDashboardVariables}'")
  ED_APPEND(${var} "  ED_rcsfile_EasyDashboardVariables='${ED_rcsfile_EasyDashboardVariables}'")
  ED_APPEND(${var} "  ED_dir_EasyDashboardVariables='${ED_dir_EasyDashboardVariables}'")
  ED_APPEND(${var} "/>")
ENDMACRO(ED_GET_EasyDashboardInfo)

MACRO(ED_DUMP_EasyDashboardInfo)
  ED_GET_EasyDashboardInfo(ED_info)
  MESSAGE("${ED_info}")
ENDMACRO(ED_DUMP_EasyDashboardInfo)

IF(NOT DEFINED ED_dir_support)
  GET_FILENAME_COMPONENT(ED_dir_support "${CTEST_SCRIPT_DIRECTORY}/../Support" ABSOLUTE)
ENDIF(NOT DEFINED ED_dir_support)

IF(NOT DEFINED ED_cache)
  SET(ED_cache "\n")
ENDIF(NOT DEFINED ED_cache)


INCLUDE("${ED_dir_support}/EasyDashboardDefaults.cmake" OPTIONAL)


IF(NOT DEFINED ED_dir_logs)
  GET_FILENAME_COMPONENT(ED_dir_logs "${CTEST_SCRIPT_DIRECTORY}/../Logs" ABSOLUTE)
ENDIF(NOT DEFINED ED_dir_logs)

IF(NOT DEFINED ED_dir_mytests)
  GET_FILENAME_COMPONENT(ED_dir_mytests "${CTEST_SCRIPT_DIRECTORY}/../My Tests" ABSOLUTE)
ENDIF(NOT DEFINED ED_dir_mytests)

IF(NOT DEFINED ED_source)
  IF(DEFINED CTEST_SOURCE_DIRECTORY)
    GET_FILENAME_COMPONENT(ED_source "${CTEST_SOURCE_DIRECTORY}" NAME)
  ELSE(DEFINED CTEST_SOURCE_DIRECTORY)
    STRING(REGEX REPLACE "(.*).cmake" "\\1" ED_source "${CTEST_SCRIPT_NAME}")
  ENDIF(DEFINED CTEST_SOURCE_DIRECTORY)
ENDIF(NOT DEFINED ED_source)
IF("${ED_source}" STREQUAL "")
  MESSAGE(FATAL_ERROR "ERROR: ED_source must be set -or- derivable from CTEST_SOURCE_DIRECTORY or CTEST_SCRIPT_NAME...")
ENDIF("${ED_source}" STREQUAL "")

GET_FILENAME_COMPONENT(ED_sourcename "${ED_source}" NAME)

SET(ED_args ${ED_args} "${CTEST_SCRIPT_ARG}")

IF(NOT DEFINED ED_config)
  IF("${ED_args}" MATCHES "Debug")
    SET(ED_config "Debug")
  ENDIF("${ED_args}" MATCHES "Debug")
  IF("${ED_args}" MATCHES "Release")
    SET(ED_config "Release")
  ENDIF("${ED_args}" MATCHES "Release")
  IF("${ED_args}" MATCHES "RelWithDebInfo")
    SET(ED_config "RelWithDebInfo")
  ENDIF("${ED_args}" MATCHES "RelWithDebInfo")
  IF("${ED_args}" MATCHES "MinSizeRel")
    SET(ED_config "MinSizeRel")
  ENDIF("${ED_args}" MATCHES "MinSizeRel")
ENDIF(NOT DEFINED ED_config)
IF(NOT DEFINED ED_config)
  SET(ED_config "MinSizeRel")
ENDIF(NOT DEFINED ED_config)

IF(NOT DEFINED ED_model)
  IF("${ED_args}" MATCHES "Continuous")
    SET(ED_model "Continuous")
  ENDIF("${ED_args}" MATCHES "Continuous")
  IF("${ED_args}" MATCHES "Nightly")
    SET(ED_model "Nightly")
  ENDIF("${ED_args}" MATCHES "Nightly")
  IF("${ED_args}" MATCHES "Weekly")
    SET(ED_model "Weekly")
  ENDIF("${ED_args}" MATCHES "Weekly")
  IF("${ED_args}" MATCHES "Experimental")
    SET(ED_model "Experimental")
  ENDIF("${ED_args}" MATCHES "Experimental")
ENDIF(NOT DEFINED ED_model)
IF(NOT DEFINED ED_model)
  SET(ED_model "Experimental")
ENDIF(NOT DEFINED ED_model)

IF(NOT DEFINED ED_gen_default)
  IF(UNIX)
    SET(ED_gen_default "unix")
  ENDIF(UNIX)
  IF(APPLE)
    SET(ED_gen_default "unix")
  ENDIF(APPLE)
  IF(WIN32)
    SET(ED_gen_default "vs")
  ENDIF(WIN32)
ENDIF(NOT DEFINED ED_gen_default)
IF(NOT DEFINED ED_gen_default)
  SET(ED_gen_default "unix")
ENDIF(NOT DEFINED ED_gen_default)

IF(NOT DEFINED ED_gen)
  IF("${ED_args}" MATCHES "bcb")
    SET(ED_gen "borland")
  ENDIF("${ED_args}" MATCHES "bcb")
  IF("${ED_args}" MATCHES "bcc")
    SET(ED_gen "borland")
  ENDIF("${ED_args}" MATCHES "bcc")
  IF("${ED_args}" MATCHES "borland")
    SET(ED_gen "borland")
  ENDIF("${ED_args}" MATCHES "borland")
  IF("${ED_args}" MATCHES "cygwin")
    SET(ED_gen "cygwin")
  ENDIF("${ED_args}" MATCHES "cygwin")
  IF("${ED_args}" MATCHES "kd3")
    SET(ED_gen "kd3")
  ENDIF("${ED_args}" MATCHES "kd3")
  IF("${ED_args}" MATCHES "msys")
    SET(ED_gen "msys")
  ENDIF("${ED_args}" MATCHES "msys")
  IF("${ED_args}" MATCHES "mingw")
    SET(ED_gen "mingw")
  ENDIF("${ED_args}" MATCHES "mingw")
  IF("${ED_args}" MATCHES "nmake")
    SET(ED_gen "nmake")
  ENDIF("${ED_args}" MATCHES "nmake")
  IF("${ED_args}" MATCHES "nmake6")
    SET(ED_gen "nmake6")
  ENDIF("${ED_args}" MATCHES "nmake6")
  IF("${ED_args}" MATCHES "nmake7")
    SET(ED_gen "nmake7")
  ENDIF("${ED_args}" MATCHES "nmake7")
  IF("${ED_args}" MATCHES "nmake71")
    SET(ED_gen "nmake71")
  ENDIF("${ED_args}" MATCHES "nmake71")
  IF("${ED_args}" MATCHES "nmake8")
    SET(ED_gen "nmake8")
  ENDIF("${ED_args}" MATCHES "nmake8")
  IF("${ED_args}" MATCHES "unix")
    SET(ED_gen "unix")
  ENDIF("${ED_args}" MATCHES "unix")
  IF("${ED_args}" MATCHES "clunix")
    SET(ED_gen "clunix")
  ENDIF("${ED_args}" MATCHES "clunix")
  IF("${ED_args}" MATCHES "cl6unix")
    SET(ED_gen "cl6unix")
  ENDIF("${ED_args}" MATCHES "cl6unix")
  IF("${ED_args}" MATCHES "cl7unix")
    SET(ED_gen "cl7unix")
  ENDIF("${ED_args}" MATCHES "cl7unix")
  IF("${ED_args}" MATCHES "cl71unix")
    SET(ED_gen "cl71unix")
  ENDIF("${ED_args}" MATCHES "cl71unix")
  IF("${ED_args}" MATCHES "cl8unix")
    SET(ED_gen "cl8unix")
  ENDIF("${ED_args}" MATCHES "cl8unix")
  IF("${ED_args}" MATCHES "vs")
    SET(ED_gen "vs8")
  ENDIF("${ED_args}" MATCHES "vs")
  IF("${ED_args}" MATCHES "vs6")
    SET(ED_gen "vs6")
  ENDIF("${ED_args}" MATCHES "vs6")
  IF("${ED_args}" MATCHES "vs7")
    SET(ED_gen "vs7")
  ENDIF("${ED_args}" MATCHES "vs7")
  IF("${ED_args}" MATCHES "vs71")
    SET(ED_gen "vs71")
  ENDIF("${ED_args}" MATCHES "vs71")
  IF("${ED_args}" MATCHES "vs8")
    SET(ED_gen "vs8")
  ENDIF("${ED_args}" MATCHES "vs8")
  IF("${ED_args}" MATCHES "vs8w64")
    SET(ED_gen "vs8w64")
  ENDIF("${ED_args}" MATCHES "vs8w64")
  IF("${ED_args}" MATCHES "watcom")
    SET(ED_gen "watcom")
  ENDIF("${ED_args}" MATCHES "watcom")
  IF("${ED_args}" MATCHES "xcode")
    SET(ED_gen "xcode")
  ENDIF("${ED_args}" MATCHES "xcode")
ENDIF(NOT DEFINED ED_gen)
IF(NOT DEFINED ED_gen)
  SET(ED_gen "${ED_gen_default}")
ENDIF(NOT DEFINED ED_gen)

IF(NOT DEFINED ED_generator)
  IF("${ED_gen}" STREQUAL "borland")
    SET(ED_generator "Borland Makefiles")
  ENDIF("${ED_gen}" STREQUAL "borland")
  IF("${ED_gen}" STREQUAL "cygwin")
    SET(ED_generator "Unix Makefiles")
  ENDIF("${ED_gen}" STREQUAL "cygwin")
  IF("${ED_gen}" STREQUAL "kd3")
    SET(ED_generator "KDevelop3")
  ENDIF("${ED_gen}" STREQUAL "kd3")
  IF("${ED_gen}" STREQUAL "msys")
    SET(ED_generator "MSYS Makefiles")
  ENDIF("${ED_gen}" STREQUAL "msys")
  IF("${ED_gen}" STREQUAL "mingw")
    SET(ED_generator "MinGW Makefiles")
  ENDIF("${ED_gen}" STREQUAL "mingw")
  IF("${ED_gen}" MATCHES "nmake")
    SET(ED_generator "NMake Makefiles")
  ENDIF("${ED_gen}" MATCHES "nmake")
  IF("${ED_gen}" MATCHES "unix")
    SET(ED_generator "Unix Makefiles")
  ENDIF("${ED_gen}" MATCHES "unix")
  IF("${ED_gen}" STREQUAL "vs6")
    SET(ED_generator "Visual Studio 6")
  ENDIF("${ED_gen}" STREQUAL "vs6")
  IF("${ED_gen}" STREQUAL "vs7")
    SET(ED_generator "Visual Studio 7")
  ENDIF("${ED_gen}" STREQUAL "vs7")
  IF("${ED_gen}" STREQUAL "vs71")
    SET(ED_generator "Visual Studio 7 .NET 2003")
  ENDIF("${ED_gen}" STREQUAL "vs71")
  IF("${ED_gen}" STREQUAL "vs8")
    SET(ED_generator "Visual Studio 8 2005")
  ENDIF("${ED_gen}" STREQUAL "vs8")
  IF("${ED_gen}" STREQUAL "vs8w64")
    SET(ED_generator "Visual Studio 8 2005 Win64")
  ENDIF("${ED_gen}" STREQUAL "vs8w64")
  IF("${ED_gen}" STREQUAL "watcom")
    SET(ED_generator "Watcom WMake")
  ENDIF("${ED_gen}" STREQUAL "watcom")
  IF("${ED_gen}" STREQUAL "xcode")
    SET(ED_generator "Xcode")
  ENDIF("${ED_gen}" STREQUAL "xcode")
ENDIF(NOT DEFINED ED_generator)
IF(NOT DEFINED ED_generator)
  MESSAGE(FATAL_ERROR "ERROR: EasyDashboardVariables variable ED_gen set to an unknown CMake generator abbreviation... ED_gen='${ED_gen}'")
ENDIF(NOT DEFINED ED_generator)

IF(NOT DEFINED ED_system)
  IF(UNIX)
    SET(ED_system "Linux")
  ENDIF(UNIX)
  IF(APPLE)
    SET(ED_system "Mac")
  ENDIF(APPLE)
  IF(WIN32)
    SET(ED_system "Win32")
  ENDIF(WIN32)
  # TODO: How can we know if an nmake build is for Win64 at this stage prior
  # to cmake configure...?
  IF("${ED_gen}" STREQUAL "vs8w64")
    SET(ED_system "Win64")
  ENDIF("${ED_gen}" STREQUAL "vs8w64")
ENDIF(NOT DEFINED ED_system)
IF(NOT DEFINED ED_system)
  SET(ED_system "UnknownSystem")
ENDIF(NOT DEFINED ED_system)

IF(NOT DEFINED ED_buildname)
  SET(ED_buildname "${ED_system}-${ED_gen}-${ED_config}")
ENDIF(NOT DEFINED ED_buildname)

IF(NOT DEFINED ED_duration)
  SET(ED_duration 85555)
ENDIF(NOT DEFINED ED_duration)

IF(NOT DEFINED ED_interval)
  SET(ED_interval 299)
ENDIF(NOT DEFINED ED_interval)

IF(NOT DEFINED ED_projectcachescript)
  SET(ED_projectcachescript "${CTEST_SCRIPT_DIRECTORY}/${ED_sourcename}.CMakeCache.cmake")
ENDIF(NOT DEFINED ED_projectcachescript)

IF(NOT DEFINED ED_site)
  SITE_NAME(ED_site)
  STRING(TOLOWER "${ED_site}" ED_site)
ENDIF(NOT DEFINED ED_site)

IF(NOT DEFINED ED_verbose)
  IF("${ED_args}" MATCHES "Verbose")
    SET(ED_verbose 1)
  ENDIF("${ED_args}" MATCHES "Verbose")
ENDIF(NOT DEFINED ED_verbose)
IF(NOT DEFINED ED_verbose)
  SET(ED_verbose 0)
ENDIF(NOT DEFINED ED_verbose)

IF("${ED_args}" MATCHES "WrapJava")
  SET(ED_wrappers ${ED_wrappers} "WrapJava")
ENDIF("${ED_args}" MATCHES "WrapJava")
IF("${ED_args}" MATCHES "WrapPython")
  SET(ED_wrappers ${ED_wrappers} "WrapPython")
ENDIF("${ED_args}" MATCHES "WrapPython")
IF("${ED_args}" MATCHES "WrapTcl")
  SET(ED_wrappers ${ED_wrappers} "WrapTcl")
ENDIF("${ED_args}" MATCHES "WrapTcl")

IF(NOT DEFINED ED_clean)
  IF("${ED_args}" MATCHES "NoClean")
    SET(ED_clean 0)
  ENDIF("${ED_args}" MATCHES "NoClean")
ENDIF(NOT DEFINED ED_clean)
IF(NOT DEFINED ED_clean)
  SET(ED_clean 1)
ENDIF(NOT DEFINED ED_clean)

IF(NOT DEFINED ED_update)
  IF("${ED_args}" MATCHES "NoUpdate")
    SET(ED_update 0)
  ENDIF("${ED_args}" MATCHES "NoUpdate")
ENDIF(NOT DEFINED ED_update)
IF(NOT DEFINED ED_update)
  SET(ED_update 1)
ENDIF(NOT DEFINED ED_update)

IF(NOT DEFINED ED_configure)
  IF("${ED_args}" MATCHES "NoConfigure")
    SET(ED_configure 0)
  ENDIF("${ED_args}" MATCHES "NoConfigure")
ENDIF(NOT DEFINED ED_configure)
IF(NOT DEFINED ED_configure)
  SET(ED_configure 1)
ENDIF(NOT DEFINED ED_configure)

IF(NOT DEFINED ED_build)
  IF("${ED_args}" MATCHES "NoBuild")
    SET(ED_build 0)
  ENDIF("${ED_args}" MATCHES "NoBuild")
ENDIF(NOT DEFINED ED_build)
IF(NOT DEFINED ED_build)
  SET(ED_build 1)
ENDIF(NOT DEFINED ED_build)

IF(NOT DEFINED ED_test)
  IF("${ED_args}" MATCHES "NoTest")
    SET(ED_test 0)
  ENDIF("${ED_args}" MATCHES "NoTest")
ENDIF(NOT DEFINED ED_test)
IF(NOT DEFINED ED_test)
  SET(ED_test 1)
ENDIF(NOT DEFINED ED_test)

IF(NOT DEFINED ED_submit)
  IF("${ED_args}" MATCHES "NoSubmit")
    SET(ED_submit 0)
  ENDIF("${ED_args}" MATCHES "NoSubmit")
ENDIF(NOT DEFINED ED_submit)
IF(NOT DEFINED ED_submit)
  SET(ED_submit 1)
ENDIF(NOT DEFINED ED_submit)
